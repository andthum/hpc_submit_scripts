# Pre-commit configuration file.
# See https://pre-commit.com/
#
# Install pre-commit via
#   python3 -m pip install --user --upgrade pre-commit
# Then install the git hook scripts in your project directory via
#   cd path/to/your/project/root
#   pre-commit install
#   pre-commit install-hooks
# Now pre-commit will run autormatically on every `git commit`.
# Bypass pre-commit and commit-msg hook with `git commit --no-verify`.


minimum_pre_commit_version: "2.0"

default_language_version:
  python: "python3.9"

# Run pre-commit as CI workflow.
# See https://pre-commit.ci/
ci:
  # Whether to autofix pull requests.
  autofix_prs: false
  # Interval for autoupdate.
  autoupdate_schedule: "quarterly"

########################################################################
# General Hooks                                                        #
########################################################################

repos:
  - repo: "https://github.com/pre-commit/pre-commit-hooks"
    rev: "v4.2.0"
    hooks:
      ### Security ###
      # Detect the presence of private keys.
      - id: "detect-private-key"
      ### Files ###
      # Prevent giant files from being committed.
      - id: "check-added-large-files"
      # Check for files that would conflict in case-insensitive
      # filesystems.
      - id: "check-case-conflict"
      # Check for symlinks which do not point to anything.
      - id: "check-symlinks"
      # Detect symlinks which are changed to regular files.
      - id: "destroyed-symlinks"
      ### Text ###
      # Ensure that (non-binary) executables have a shebang.
      - id: "check-executables-have-shebangs"
      # Check for files that contain merge conflict strings.
      - id: "check-merge-conflict"
      # Ensure that a file is either empty, or ends with one newline.
      - id: "end-of-file-fixer"
      # Replace or checks mixed line ending.
      - id: "mixed-line-ending"
        args:
          # Don't auto fix wrong line endings.
          - "--fix=no"
      # Trim trailing whitespace.
      - id: "trailing-whitespace"
        args:
          # Preserve Markdown hard linebreaks.
          - "--markdown-linebreak-ext=md"
      ### Markup languages ###
      # Check toml files for parseable syntax.
      - id: "check-toml"
      # Check xml files for parseable syntax.
      - id: "check-xml"
      # Check yaml files for parseable syntax.
      - id: "check-yaml"
      ### json ###
      # Check json files for parseable syntax.
      - id: "check-json"
      # Set a standard for formatting json files.
      - id: "pretty-format-json"
      ### Python ###
      # Check whether the files parse as valid Python.
      - id: "check-ast"
      # Check if docstrings come before the code.
      - id: "check-docstring-first"
      # Check for debug statements.
      - id: "debug-statements"
      # Sort entries in requirements.txt.
      - id: "requirements-txt-fixer"

########################################################################
# Validate GitHub / GitLab CI workflows                                #
########################################################################

  - repo: "https://github.com/python-jsonschema/check-jsonschema"
    rev: "0.15.1"
    hooks:
      # Validate GitHub Actions against the schema provided by
      # SchemaStore.
      - id: "check-github-actions"
      # Validate GitHub Workflows against the schema provided by
      # SchemaStore.
      - id: "check-github-workflows"
      # Validate GitLab CI config against the schema provided by
      # SchemaStore.
      # NOTE: Detects false positives for the code_quality job.
      - id: "check-gitlab-ci"
      # Validate ReadTheDocs config against the schema provided by
      # ReadTheDocs.
      - id: "check-readthedocs"

########################################################################
# Python Hooks                                                         #
########################################################################

  - repo: "https://github.com/pre-commit/pygrep-hooks"
    rev: "v1.9.0"
    hooks:
      # Enforce that `# noqa` comments always occur with specific codes.
      - id: "python-check-blanket-noqa"
      # Enforce that `# type: ignore` comments always occur with
      # specific codes.
      - id: "python-check-blanket-type-ignore"
      # Prevent common mock mistakes
      - id: "python-check-mock-methods"
      # Check for closing backticks.
      - id: "rst-backticks"
      # Check if RST directives end with a colon.
      - id: "rst-directive-colons"
      # Check if inline code touches normal text.
      - id: "rst-inline-touching-normal"

  - repo: "https://github.com/PyCQA/isort"
    rev: "5.10.1"
    hooks:
      # Sort import statements with isort
      - id: "isort"
        args:
          # Only check files without modifying them.
          - "--check"
          # Print a diff of all the changes isort would make.
          - "--diff"
          # Use color in terminal output.
          - "--color"
        additional_dependencies:
          # Required for isort's `--color` option.
          - "colorama"

  - repo: "https://github.com/psf/black"
    # The `refs/tags/<tag>:refs/tags/<tag>` is needed for black's
    # `required-version` option to work.  See
    # https://github.com/psf/black/issues/2493#issuecomment-1081987650
    rev: "refs/tags/22.3.0:refs/tags/22.3.0"
    hooks:
      # Format Python code with black.
      - id: "black"
        args:
          # Only check files without modifying them.
          - "--check"
          # Print a diff of all the changes black would make.
          - "--diff"
          # Use color in terminal output.
          - "--color"

  - repo: "https://github.com/PyCQA/flake8"
    rev: "4.0.1"
    hooks:
      # Lint Python code with Flake8.
      - id: "flake8"
        args:
          # Decrease the verbosity of the output.
          - "--quiet"
        additional_dependencies:
          # Required Flake8 plugins.
          # Keep in sync with `requirements_dev.txt` and `.flake8`!
          - "flake8-bandit >=3.0,<4.0"
          - "flake8-bugbear >=22.0,<23.0"
          - "flake8-builtins >=1.0, <2.0"
          - "flake8-comprehensions >=3.0, <4.0"
          - "flake8-docstrings >=1.0, <2.0"
          - "flake8-isort >=4.0, <5.0"
          - "flake8-logging-format >=0.1, <1.0"
          - "flake8-pytest-style >=1.0, <2.0"
          - "flake8-rst >=0.1, <1.0"
          - "flake8-rst-docstrings >=0.1, <1.0"
          - "pep8-naming >=0.1, <1.0"

  - repo: "https://github.com/PyCQA/bandit"
    rev: "1.7.4"
    hooks:
      # Check code security with bandit.
      - id: "bandit"
        args:
          # Config file to use.
          - "--configfile"
          - "pyproject.toml"
          # Number of code lines to output for each issue.
          - "--number"
          - "1"
          # Find and process files in subdirectories.
          - "--recursive"
        additional_dependencies:
          # Required to read config from pyproject.toml
          - "toml"

########################################################################
# Shell / Bash Hooks                                                   #
########################################################################

  - repo: "https://github.com/cisagov/pre-commit-shfmt"
    rev: "v0.0.2"
    hooks:
      # Format shell scripts with shfmt.
      - id: "shfmt"
        args:
          # Language variant to parse (bash/posix/mksh/bats).
          - "-ln bash"
          # Indentation level.
          - "-i 4"
          # Indent switch cases.
          - "-ci"
          # Add a space after redirect operations (`>`).
          - "-sr"
          # Error with a diff when the formatting differs.
          - "-d"
          # List files whose formatting differs.
          - "-l"

  - repo: "https://github.com/shellcheck-py/shellcheck-py"
    rev: "v0.8.0.4"
    hooks:
      # Lint shell scripts with shellcheck.
      # NOTE: The official shellcheck hook from
      # https://github.com/koalaman/shellcheck-precommit requires Docker
      # to be installed.  Therefore, we use the shellcheck-py Python
      # package instead.
      - id: "shellcheck"

########################################################################
# Markdown Hooks                                                       #
########################################################################

  - repo: "https://github.com/markdownlint/markdownlint"
    rev: "v0.11.0"
    hooks:
      # Lint Markdown files with markdownlint.
      - id: "markdownlint"
