# Pre-commit configuration file.
# See https://pre-commit.com/
#
# Install pre-commit via
#   python3 -m pip install --user --upgrade pre-commit
# Then install the git hook scripts in your project directory via
#   cd path/to/your/project/root
#   pre-commit install
#   pre-commit install-hooks
# Now pre-commit will run autormatically on every `git commit`.
# Bypass pre-commit and commit-msg hook with `git commit --no-verify`.


minimum_pre_commit_version: "2.0"

default_language_version:
  python: "python3.9"

# https://pre-commit.ci/
ci:
  # Whether to autofix pull requests
  autofix_prs: "false"

########################################################################
# General Hooks                                                        #
########################################################################

repos:
  - repo: "https://github.com/pre-commit/pre-commit-hooks"
    rev: "v4.1.0"
    hooks:
      ### Security ###
      # Detects the presence of private keys.
      - id: "detect-private-key"
      ### Files ###
      # Prevents giant files from being committed.
      - id: "check-added-large-files"
      # Checks for files that would conflict in case-insensitive
      # filesystems.
      - id: "check-case-conflict"
      # Checks for symlinks which do not point to anything.
      - id: "check-symlinks"
      # Detects symlinks which are changed to regular files.
      - id: "destroyed-symlinks"
      ### Text ###
      # Ensures that (non-binary) executables have a shebang.
      - id: "check-executables-have-shebangs"
      # Checks for files that contain merge conflict strings.
      - id: "check-merge-conflict"
      # Ensures that a file is either empty, or ends with one newline.
      - id: "end-of-file-fixer"
      # Replaces or checks mixed line ending.
      - id: "mixed-line-ending"
        args: [--fix=no]
      # Trims trailing whitespace.
      - id: "trailing-whitespace"
        # Preserve Markdown hard linebreaks
        args: [--markdown-linebreak-ext=md]
      ### Markup languages ###
      # Checks toml files for parseable syntax.
      - id: "check-toml"
      # Checks xml files for parseable syntax.
      - id: "check-xml"
      # Checks yaml files for parseable syntax.
      - id: "check-yaml"
      ### json ###
      # Checks json files for parseable syntax.
      - id: "check-json"
      # Sets a standard for formatting json files.
      - id: "pretty-format-json"
      ### Python ###
      # Checks whether the files parse as valid Python.
      - id: "check-ast"
      # Checks if docstrings come before the code.
      - id: "check-docstring-first"
      # Checks for debug statements.
      - id: "debug-statements"
      # Sorts entries in requirements.txt.
      - id: "requirements-txt-fixer"

  - repo: "https://github.com/jumanjihouse/pre-commit-hooks"
    rev: "2.1.6"
    hooks:
    ### Markdown ###
    # Lint Markdown files with markdownlint-cli.
    # NOTE: Needs the ruby development package for installation of
    # the hook.
    - id: "markdownlint"
    ### Shell / Bash ###
    # Format shell scripts with shfmt.
    - id: "shfmt"
      args: [-ln bash, -i 4, -ci, -sr, -d, -l]
    # Lint shell scripts with shellcheck.
    - id: "shellcheck"
      args: [--format=quiet]

  - repo: "https://github.com/python-jsonschema/check-jsonschema"
    rev: "0.14.2"
    hooks:
      # Validate GitHub Actions against the schema provided by
      # SchemaStore.
      - id: "check-github-actions"
      # Validate GitHub Workflows against the schema provided by
      # SchemaStore.
      - id: "check-github-workflows"
      # Validate GitLab CI config against the schema provided by
      # SchemaStore.
      # Detects false positives for the code_quality job.
      # - id: "check-gitlab-ci"
      # Validate ReadTheDocs config against the schema provided by
      # ReadTheDocs.
      - id: "check-readthedocs"

########################################################################
# Python Hooks                                                         #
########################################################################

  - repo: "https://github.com/pre-commit/pygrep-hooks"
    rev: "v1.9.0"
    hooks:
      # Enforce that `# noqa` comments always occur with specific codes.
      - id: "python-check-blanket-noqa"
      # Enforce that `# type: ignore` comments always occur with
      # specific codes.
      - id: "python-check-blanket-type-ignore"
      # Prevent common mock mistakes
      - id: "python-check-mock-methods"
      # Check for closing backticks.
      - id: "rst-backticks"
      # Check if RST directives end with a colon.
      - id: "rst-directive-colons"
      # Check if inline code touches normal text.
      - id: "rst-inline-touching-normal"

  - repo: "https://github.com/pycqa/isort"
    rev: "5.10.1"
    hooks:
      # Sort import statements with isort
      - id: "isort"
        args: [--check, --diff, --color]

  - repo: "https://github.com/psf/black"
    rev: "22.3.0"
    hooks:
      # Format Python code with black.
      - id: "black"
        args: [--check, --diff, --color]

  - repo: "https://github.com/PyCQA/flake8"
    rev: "4.0.1"
    hooks:
      # Lint Python code with flake8.
      - id: "flake8"

  - repo: "https://github.com/PyCQA/bandit"
    rev: "1.7.4"
    hooks:
      # Check code security with bandit.
      - id: "bandit"
        args: [--recursiv]
